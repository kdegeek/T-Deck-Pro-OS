#!/usr/bin/env python3
"""
T-Deck-Pro OS - Pre-Build Script
Handles build preparation tasks for the T-Deck-Pro operating system
"""

import os
import sys
import subprocess
from pathlib import Path

# Add PlatformIO environment to Python path
try:
    Import("env")
except:
    print("Warning: Not running in PlatformIO environment")
    env = None

def print_build_info():
    """Print build information"""
    print("=" * 60)
    print("T-DECK-PRO OS - PRE-BUILD SCRIPT")
    print("=" * 60)
    
    if env:
        print(f"Platform: {env.get('PIOPLATFORM', 'Unknown')}")
        print(f"Framework: {env.get('PIOFRAMEWORK', 'Unknown')}")
        print(f"Board: {env.get('BOARD', 'Unknown')}")
        print(f"Environment: {env.get('PIOENV', 'Unknown')}")
    
    print("=" * 60)

def check_dependencies():
    """Check for required dependencies and tools"""
    print("Checking dependencies...")
    
    # Check if git is available (for version info)
    try:
        result = subprocess.run(['git', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"✓ Git available: {result.stdout.strip()}")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("⚠ Git not available - version info will be limited")
    
    # Check project structure
    project_root = Path.cwd()
    required_dirs = ['src', 'src/core', 'src/apps']
    
    for dir_path in required_dirs:
        if (project_root / dir_path).exists():
            print(f"✓ Directory exists: {dir_path}")
        else:
            print(f"✗ Missing directory: {dir_path}")
            return False
    
    return True

def generate_build_info():
    """Generate build information header"""
    print("Generating build information...")
    
    # Get git information if available
    git_hash = "unknown"
    git_branch = "unknown"
    build_time = ""
    
    try:
        # Get git commit hash
        result = subprocess.run(['git', 'rev-parse', '--short', 'HEAD'], 
                              capture_output=True, text=True, check=True)
        git_hash = result.stdout.strip()
        
        # Get git branch
        result = subprocess.run(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], 
                              capture_output=True, text=True, check=True)
        git_branch = result.stdout.strip()
        
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    
    # Get build timestamp
    from datetime import datetime
    build_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    
    # Create build info header
    build_info_content = f'''#ifndef BUILD_INFO_H
#define BUILD_INFO_H

// Auto-generated build information
// DO NOT EDIT - This file is generated by pre_build.py

#define BUILD_GIT_HASH "{git_hash}"
#define BUILD_GIT_BRANCH "{git_branch}"
#define BUILD_TIMESTAMP "{build_time}"
#define BUILD_VERSION "1.0.0"

// Build configuration
#ifdef DEBUG
#define BUILD_TYPE "Debug"
#else
#define BUILD_TYPE "Release"
#endif

// Hardware configuration
#define HARDWARE_VERSION "T-Deck-Pro"
#define FIRMWARE_NAME "T-Deck-Pro OS"

#endif // BUILD_INFO_H
'''
    
    # Write build info header
    build_info_path = Path("src/core/build_info.h")
    build_info_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(build_info_path, 'w') as f:
        f.write(build_info_content)
    
    print(f"✓ Build info generated: {build_info_path}")
    print(f"  - Git Hash: {git_hash}")
    print(f"  - Git Branch: {git_branch}")
    print(f"  - Build Time: {build_time}")

def setup_build_environment():
    """Setup build environment variables"""
    if not env:
        return
    
    print("Setting up build environment...")
    
    # Add custom include paths
    env.Append(CPPPATH=[
        "src",
        "src/core",
        "src/apps",
        "src/core/hal",
        "src/core/display",
        "src/core/communication",
        "src/core/storage",
        "src/core/ui",
        "src/core/server",
        "src/core/utils"
    ])
    
    # Add preprocessor definitions based on environment
    env_name = env.get('PIOENV', '')
    
    if 'debug' in env_name:
        env.Append(CPPDEFINES=[
            "BUILD_DEBUG=1",
            "ENABLE_LOGGING=1"
        ])
    elif 'release' in env_name:
        env.Append(CPPDEFINES=[
            "BUILD_RELEASE=1",
            "ENABLE_LOGGING=0"
        ])
    
    print("✓ Build environment configured")

def main():
    """Main pre-build function"""
    print_build_info()
    
    if not check_dependencies():
        print("✗ Dependency check failed!")
        sys.exit(1)
    
    generate_build_info()
    setup_build_environment()
    
    print("=" * 60)
    print("PRE-BUILD COMPLETE - Ready to compile!")
    print("=" * 60)

if __name__ == "__main__":
    main()