; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]

; *******************************************************
;  To use the A7682E, you must plug in the battery
; *******************************************************
; src_dir = examples/A7682E/test_AT
; src_dir = examples/A7682E/deep_sleep

; src_dir = examples/bq25896_shutdown
; src_dir = examples/factory
; src_dir = examples/test_BHI260AP
; src_dir = examples/test_EPD
; src_dir = examples/test_GPS
; src_dir = examples/test_keypad
; src_dir = examples/test_lora_recv
; src_dir = examples/test_lora_send
; src_dir = examples/test_LTR_553ALS
; src_dir = examples/test_lvgl
; src_dir = examples/test_pcm5102a
; src_dir = examples/test_sd
; src_dir = examples/test_touchpad
; src_dir = examples/test_wifi

src_dir = src

; *******************************************************
boards_dir = boards
default_envs = T-Deck-Pro
; src_dir = examples/${platformio.default_envs}

[env:T-Deck-Pro]

platform = espressif32@6.5.0
board = T-Deck-Pro
framework = arduino
upload_speed = 115200
monitor_speed = 115200
monitor_filters = esp32_exception_decoder
; extra_scripts =  ./script/pos_extra_script.py

build_flags =
    -DBOARD_HAS_PSRAM

    ; C++ Standard (keep default for Arduino compatibility)
    ; -std=c++14
    ; -frtti
    ; -fexceptions

    ; Enable UARDUINO_ USB_ CDC_ ON_ BOOT will start printing and wait for terminal access during startup
    -DARDUINO_USB_CDC_ON_BOOT=1

    ; Enable UARDUINO_USB_CDC_ON_BOOT will turn off printing and will not block when using the battery
    ; -DARDUINO_USB_CDC_ON_BOOT=0

    -DDISABLE_ALL_LIBRARY_WARNINGS
    -Wno-narrowing
    -Wno-unused-variable
    -Wno-unused-function

    ; LVGL config
    -DLV_LVGL_H_INCLUDE_SIMPLE
    -DLV_CONF_INCLUDE_SIMPLE
    -include config/lv_conf.h
    -DTINY_GSM_MODEM_SIM7672

    ;  -DLOG_PORT=Serial

    ; Debug output
    -DCORE_DEBUG_LEVEL=0
    -DDISABLE_DIAGNOSTIC_OUTPUT=1

build_src_filter =
    +<*>
    -<main.cpp>
    -<main_simple.cpp>
    +<main_phase1.cpp>
    -<main_hybrid.cpp>
    -<main_integrated.cpp>
    -<integration/>
    -<core/>
    -<drivers/>

lib_deps =
    ; Core Arduino libraries
    bblanchon/ArduinoJson@^7.0.0
    SPI
    Wire
    FS
    LittleFS
    EEPROM
    SD
    WiFi

    ; MQTT client (replaced PubSubClient with AsyncMqttClient)
    marvinroger/AsyncMqttClient@^0.9.0
    me-no-dev/ESPAsyncTCP@^1.2.2

    ; Note: Many libraries are already available in lib/ directory
    ; GxEPD2, lvgl, XPowersLib, RadioLib, TinyGPSPlus, TinyGSM, wireguard
    ; These will be used from local lib/ directory

; *******************************************************
; T-Deck-Pro-Integrated Environment
; Includes Phase 2 services and integration layer
; *******************************************************
[env:T-Deck-Pro-Integrated]

platform = espressif32@6.5.0
board = T-Deck-Pro
framework = arduino
upload_speed = 115200
monitor_speed = 115200
monitor_filters = esp32_exception_decoder

build_flags =
    -DBOARD_HAS_PSRAM

    ; Phase 2 Integration flags
    -DPHASE2_ENABLED=1
    -DINTEGRATION_LAYER_ENABLED=1
    -DSERVICE_MANAGER_ENABLED=1
    -DEVENT_BRIDGE_ENABLED=1
    -DCONFIG_MANAGER_ENABLED=1
    -DLVGL_INTEGRATION_ENABLED=1

    ; Memory optimization for Phase 2
    -DCONFIG_SPIRAM_SUPPORT=1
    -DCONFIG_SPIRAM_USE_MALLOC=1
    -DCONFIG_SPIRAM_CACHE_WORKAROUND=1

    ; C++ Standard for Phase 2 features
    -std=c++14
    -frtti
    -fexceptions

    ; USB CDC configuration
    -DARDUINO_USB_CDC_ON_BOOT=1

    ; Warning suppression
    -DDISABLE_ALL_LIBRARY_WARNINGS
    -Wno-narrowing
    -Wno-unused-variable
    -Wno-unused-function
    -Wno-deprecated-declarations

    ; LVGL config
    -DLV_LVGL_H_INCLUDE_SIMPLE
    -DLV_CONF_INCLUDE_SIMPLE
    -include config/lv_conf.h
    -DTINY_GSM_MODEM_SIM7672

    ; Debug output (increased for Phase 2)
    -DCORE_DEBUG_LEVEL=1
    -DDISABLE_DIAGNOSTIC_OUTPUT=0

    ; Memory configuration
    -DCONFIG_ESP32S3_DEFAULT_CPU_FREQ_240=1
    -DCONFIG_ESP32S3_SPIRAM_SUPPORT=1

    ; Linker flags to resolve FS typeinfo issue
    -Wl,--unresolved-symbols=ignore-in-object-files

build_unflags =
    -fno-rtti

build_src_filter =
    +<*>
    -<main.cpp>
    -<main_simple.cpp>
    -<main_phase1.cpp>
    +<main_integrated.cpp>
    +<integration/>
    -<core/>
    -<drivers/>

lib_deps =
    ; Core Arduino libraries
    bblanchon/ArduinoJson@^7.0.0
    SPI
    Wire
    LittleFS
    EEPROM
    SD
    WiFi

    ; MQTT client for Phase 2 services
    marvinroger/AsyncMqttClient@^0.9.0
    me-no-dev/ESPAsyncTCP@^1.2.2

    ; Additional Phase 2 dependencies
    ; Unity testing framework (for future testing)
    ; throwtheswitch/Unity@^2.5.2

    ; Note: Many libraries are already available in lib/ directory
    ; GxEPD2, lvgl, XPowersLib, RadioLib, TinyGPSPlus, TinyGSM, wireguard
    ; These will be used from local lib/ directory

; *******************************************************
; T-Deck-Pro-Hybrid Environment
; Incremental Phase 2 integration starting from Phase 1 base
; *******************************************************
[env:T-Deck-Pro-Hybrid]

platform = espressif32@6.5.0
board = T-Deck-Pro
framework = arduino
upload_speed = 115200
monitor_speed = 115200
monitor_filters = esp32_exception_decoder

build_flags =
    -DBOARD_HAS_PSRAM

    ; C++ Standard for Phase 2 features
    -std=c++14
    -frtti
    -fexceptions

    ; Enable UARDUINO_ USB_ CDC_ ON_ BOOT will start printing and wait for terminal access during startup
    -DARDUINO_USB_CDC_ON_BOOT=1

    -DDISABLE_ALL_LIBRARY_WARNINGS
    -Wno-narrowing
    -Wno-unused-variable
    -Wno-unused-function

    ; LVGL config (same as working Phase 1)
    -DLV_LVGL_H_INCLUDE_SIMPLE
    -DLV_CONF_INCLUDE_SIMPLE
    -include config/lv_conf.h
    -DTINY_GSM_MODEM_SIM7672

    ; Debug output
    -DCORE_DEBUG_LEVEL=0
    -DDISABLE_DIAGNOSTIC_OUTPUT=1

    ; Phase 1 enabled
    -DPHASE1_ENABLED=1

    ; Phase 2 infrastructure - enable for integration
    -DINTEGRATION_LAYER_ENABLED=1

    ; Phase 2 components - enable incrementally during testing
    ; -DSERVICE_MANAGER_ENABLED=1
    ; -DEVENT_BRIDGE_ENABLED=1
    ; -DCONFIG_MANAGER_ENABLED=1

    ; Linker flags to resolve RTTI/typeinfo issues
    -Wl,--unresolved-symbols=ignore-in-object-files

build_unflags =
    -fno-rtti

build_src_filter =
    +<*>
    -<main.cpp>
    -<main_simple.cpp>
    -<main_phase1.cpp>
    -<main_integrated.cpp>
    +<main_hybrid.cpp>
    +<integration/>
    -<core/>
    -<drivers/>

lib_deps =
    ${env:T-Deck-Pro.lib_deps}